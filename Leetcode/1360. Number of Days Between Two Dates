class Solution {
public:
    bool isLeapYear(int year) {
        if (year % 4 == 0) {
            if (year % 100 == 0) {
                return year % 400 == 0;
            }
            return true;
        }
        return false;
    }

    int daysInMonth(int year, int month) {
        vector<int> daysPerMonth = {31, 28, 31, 30, 31, 30,
                                    31, 31, 30, 31, 30, 31};
        if (month == 2 && isLeapYear(year)) {
            return 29;
        }
        return daysPerMonth[month - 1];
    }

    int daysSinceEpoch(int year, int month, int day) {
        int days = 0;
        for (int y = 1971; y < year; y++) {
            days += isLeapYear(y) ? 366 : 365;
        }
        for (int m = 1; m < month; m++) {
            days += daysInMonth(year, m);
        }
        days += day - 1;
        return days;
    }

    int days(const string& date) {
        int year = stoi(date.substr(0, 4));
        int month = stoi(date.substr(5, 2));
        int day = stoi(date.substr(8, 2));
        return daysSinceEpoch(year, month, day);
    }
    int daysBetweenDates(string date1, string date2) {
        // change date1, date2 to days1(days) and days2(days);
        int days1 = days(date1);
        int days2 = days(date2);
        return abs(days1 - days2);
    }
};
