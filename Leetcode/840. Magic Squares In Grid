class Solution {
public:
    bool is_dis(vector<vector<int>>& grid, int ic,int jc)
    {
        int N[16]={0};
        for (int i=-1;i<2;i++)
        {
            for (int j=-1;j<2;j++)
            {
                N[grid[ic+i][jc+j]]++;
            }
        }
        if (N[0]) return false;
        for (int i=10;i<16;i++) if (N[i]!=0) return false;
        for (int i=0;i<10;i++) if (N[i]>=2) return false;
        return true;
    }
    bool is_equal(vector<vector<int>>& grid,int ic, int jc)
    {
        int Srow[3]={0};
        int Scol[3]={0};
        for (int i=-1;i<2;i++)
        {
            for (int j=-1;j<2;j++)
            {
                Srow[1+i]+=grid[ic+i][jc+j];
                Scol[1+j]+=grid[ic+i][jc+j];
            }
        }
        for (int i=0;i<3;i++) cout <<Srow[i]<<" "; cout <<endl;
        for (int i=0;i<3;i++) cout <<Scol[i]<<" "; cout <<endl;
        int maidia=grid[ic-1][jc-1]+grid[ic][jc]+grid[ic+1][jc+1];
        int subdia=grid[ic-1][jc+1]+grid[ic][jc]+grid[ic+1][jc-1];
        cout <<maidia<<" "<< subdia<<endl;
        for (int i=0;i<3;i++) if (Srow[i]!=Scol[i]) return false;
        return Srow[0]==maidia && maidia==subdia;
    }
    
    int numMagicSquaresInside(vector<vector<int>>& grid) {
        if (grid.size()<=2 || grid[0].size()<=2) return 0;
        int count=0;
        for (int i=1;i<grid.size()-1;i++)
        {
            for (int j=1;j<grid[0].size()-1;j++)
            {
                if (is_equal(grid,i,j) && is_dis(grid,i,j)) count++; 
            }
        }
        return count;
    }
};
