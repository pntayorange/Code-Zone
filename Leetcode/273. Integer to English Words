class Solution {
public:
    unordered_map<int, string> d = {
        //{0, "Zero"},
        {1, "One"},
        {2, "Two"},
        {3, "Three"},
        {4, "Four"},
        {5, "Five"},
        {6, "Six"},
        {7, "Seven"},
        {8, "Eight"},
        {9, "Nine"},
        {10, "Ten"},
        {11, "Eleven"},
        {12, "Twelve"},
        {13, "Thirteen"},
        {14, "Fourteen"},
        {15, "Fifteen"},
        {16, "Sixteen"},
        {17, "Seventeen"},
        {18, "Eighteen"},
        {19, "Nineteen"},
        {20, "Twenty"},
        {30, "Thirty"},
        {40, "Forty"},
        {50, "Fifty"},
        {60, "Sixty"},
        {70, "Seventy"},
        {80, "Eighty"},
        {90, "Ninety"},
        {100, "Hundred"},
        {1000, "Thousand"},
        {1000000, "Million"},
        {1000000000, "Billion"}};

    string change(int num) {
        string str;
        if (num / 100 != 0) {
            str += d[num / 100] + " ";
            str += d[100] + " ";
            num -= num / 100 * 100;
            if (num == 0)
                str.pop_back();
        }
        if (num / 10 == 1) {
            str += d[10 + num % 10];
        } else {
            if (num >= 20) {
                str += d[num / 10 * 10] + " ";
                num -= num / 10 * 10;
                if (num == 0)
                    str.pop_back();
            }
            if (num % 10 != 0) {
                str += d[num % 10];
            }
        }
        return str;
    }
    string numberToWords(int num) {
        if (num == 0)
            return "Zero";
        int div = 1000000000;
        string str;
        while (num > 0) {
            int temp = num / div;
            if (temp != 0) {
                str += change(temp) + " ";
                if (div != 1)
                    str += d[div] + " ";
            }
            num -= temp * div;
            div /= 1000;
        }
        str.pop_back();
        if (str[str.length() - 1] == ' ')
            str.pop_back();
        return str;
    }
};
