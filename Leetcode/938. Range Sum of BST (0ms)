/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
const static auto fast = [] {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return 0;
}();

class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        int sum = 0;
        while (root) {
            if (root->left) {
                TreeNode* l = root->left;
                TreeNode* c = root->left;
                while (l->right) {
                    l = l->right;
                }

                l->right = root;
                root->left = nullptr;
                root = c;
            } else {
                if (root->val >= low && root->val <= high) {
                    sum += root->val;
                }
                root = root->right;
            }
        }
        return sum;
    }
};
