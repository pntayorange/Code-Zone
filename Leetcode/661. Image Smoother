class Solution {
public:
    vector<vector<int>> imageSmoother(vector<vector<int>>& img) {
        int r = img.size();
        int c = img[0].size();
        vector<vector<int>> smooth(r, vector<int>(c, 0));
        if (r == 1 && c == 1) {
            return img;
        } else if (c == 1) {
            if (r == 2) {
                smooth[0][0] = (img[0][0] + img[1][0]) / 2;
                smooth[1][0] = (img[0][0] + img[1][0]) / 2;
                return smooth;
            }
            for (int i = 0; i < r; ++i) {
                int sum = img[i][0];
                int count = 1;

                if (i > 0) {
                    sum += img[i - 1][0];
                    ++count;
                }
                if (i < r - 1) {
                    sum += img[i + 1][0];
                    ++count;
                }

                smooth[i][0] = sum / count;
            }
            return smooth;
        } else if (r == 1) {
            if (c == 2) {
                smooth[0][0] = (img[0][0] + img[0][1]) / 2;
                smooth[0][1] = (img[0][0] + img[0][1]) / 2;
                return smooth;
            }
            for (int j = 0; j < c; ++j) {
                if (j == 0) {
                    smooth[0][j] = (img[0][j] + img[0][j + 1]) / 2;
                } else if (j == c - 1) {
                    smooth[0][j] = (img[0][j - 1] + img[0][j]) / 2;
                } else {
                    smooth[0][j] =
                        (img[0][j - 1] + img[0][j] + img[0][j + 1]) / 3;
                }
            }
            return smooth;
        }

        // Process the center cells
        for (int i = 1; i < r - 1; ++i) {
            for (int j = 1; j < c - 1; ++j) {
                int sum3x3 = img[i][j] + img[i - 1][j - 1] + img[i - 1][j] +
                             img[i - 1][j + 1] + img[i][j - 1] + img[i][j + 1] +
                             img[i + 1][j - 1] + img[i + 1][j] +
                             img[i + 1][j + 1];
                smooth[i][j] = sum3x3 / 9;
            }
        }

        // Top-left corner
        int sum2x2 = img[0][0] + img[0][1] + img[1][0] + img[1][1];
        smooth[0][0] = sum2x2 / 4;

        // Top-right corner
        sum2x2 = img[0][c - 2] + img[0][c - 1] + img[1][c - 2] + img[1][c - 1];
        smooth[0][c - 1] = sum2x2 / 4;

        // Bottom-left corner
        sum2x2 = img[r - 2][0] + img[r - 2][1] + img[r - 1][0] + img[r - 1][1];
        smooth[r - 1][0] = sum2x2 / 4;

        // Bottom-right corner
        sum2x2 = img[r - 2][c - 2] + img[r - 2][c - 1] + img[r - 1][c - 2] +
                 img[r - 1][c - 1];
        smooth[r - 1][c - 1] = sum2x2 / 4;

        // Top edge
        for (int j = 1; j < c - 1; ++j) {
            int sum3x2 = img[0][j - 1] + img[0][j] + img[0][j + 1] +
                         img[1][j - 1] + img[1][j] + img[1][j + 1];
            smooth[0][j] = sum3x2 / 6;
        }

        // Bottom edge
        for (int j = 1; j < c - 1; ++j) {
            int sum3x2 = img[r - 2][j - 1] + img[r - 2][j] + img[r - 2][j + 1] +
                         img[r - 1][j - 1] + img[r - 1][j] + img[r - 1][j + 1];
            smooth[r - 1][j] = sum3x2 / 6;
        }

        // Left edge
        for (int i = 1; i < r - 1; ++i) {
            int sum3x2 = img[i - 1][0] + img[i - 1][1] + img[i][0] + img[i][1] +
                         img[i + 1][0] + img[i + 1][1];
            smooth[i][0] = sum3x2 / 6;
        }

        // Right edge
        for (int i = 1; i < r - 1; ++i) {
            int sum3x2 = img[i - 1][c - 2] + img[i - 1][c - 1] + img[i][c - 2] +
                         img[i][c - 1] + img[i + 1][c - 2] + img[i + 1][c - 1];
            smooth[i][c - 1] = sum3x2 / 6;
        }

        return smooth;
    }
};
