#include <bits/stdc++.h>
#pragma GCC optimize("O3")
#pragma GCC optimize("Ofast", "inline", "ffast-math", "unroll-loops", "no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native", "f16c")
static const auto DPSolver = []()
{ std::ios_base::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr); return 'c'; }();
using namespace std;
class Solution {
public:
    string makeSmallestPalindrome(string s) {
        for(int i=0,j=s.size()-1;i<=j;i++,j--){
            if(s[i]-s[j]>0){
                s[i]=s[j];
            }
            else if(s[i]-s[j]<0){
                s[j]=s[i];
            }
        }
        return s;
    }
};
