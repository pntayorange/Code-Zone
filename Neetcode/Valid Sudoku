class Solution {
public:
    bool three2three(vector<vector<char>> &board, int index, int jndex)
    {
        int N[9]={0};
        for (int i=0;i<3;i++)
        {
            for (int j=0;j<3;j++)
            {
               if (board[i+index][j+jndex]!='.') N[board[i+index][j+jndex]-'1']++;
            }
        }
        for (int i=0;i<9;i++)
        {
            if (N[i]>=2) return false;
        }
        return true;
    }

    bool isValidSudoku(vector<vector<char>>& board) {
    int Row[9];
    int Col[9];
    for (int i=0;i<9;i++)
    {
        for (int j=0;j<9;j++)
        {
            Row[j]=0;
        }
        for (int j=0;j<9;j++)
        {
           if (board[i][j]!='.') Row[board[i][j]-'1']++;
        }
        for (int j=0;j<9;j++)
        {
            if(Row[j]>=2) return false;
        }
    }       

    for (int i=0;i<9;i++)
    {
        for (int j=0;j<9;j++)
        {
            Col[j]=0;
        }
        for (int j=0;j<9;j++)
        {
           if (board[j][i]!='.') Col[board[j][i]-'1']++;
        }
        for (int j=0;j<9;j++)
        {
            if(Col[j]>=2) return false;
        }
       
    }  
     for (int i=0;i<9;i+=3)
        for (int j=0;j<9;j+=3) if (!three2three(board,i,j)) return false;
    return true;
    }
};
